1.2升级1.3，命令行着实折腾了一下，eag整个配置就发生了变化。
导致售后不得不重新配置eag，给升级工作带来了巨大的工作量。

因为1.3的多实例设计和底层不一样，很多后续的系统设计eag无法跟上，
比如新的HMD多实例管理方案。
这就导致2.0上的eag设计不得不再次发生变化，变化本身除了产生新的设计工作量以外，
另一个比较重要的影响就是 命令行的兼容问题，如果2.0不能兼容1.3的配置，
届时再对升级造成影响，就没办法再跟客户和售后交代了。


2.0多实例设计和1.3的不同之处
1、2.0多实例将使用一个进程一个实例的方式，和wid，asd等相同。
   1.3上的多实例是在不同的实例线程上实现的。
2、1.3的配置是通过配置文件加载实现的，
   2.0上会修改为完全由dbus进行配置。
3、captive portal的实现将在2.0上屏蔽掉，直接在eag的实例中选择实例相关的下行接口。
   在service enable的时候，统一下发规则。
   这里还有一个事情要做，就是在不同实例下不能配置监听相同的接口，
      也就是在往一个实例中添加下行接口的时候，需要检测这个接口是否已经被添加到其他接口了。
4、对于多portal，多radius，多nasid有一个策略id的概念在里面，
      2.0上可能会去掉，直接配置实例就可以了。
      


关于2.0eag如何兼容1.3的配置问题
1.3的实现是全部写文件，最后在启动的时候，由eag进程读取配置文件。
所以可以用的方案就是：保留1.3现有的所有命令，eag2.0全部重新实现(仿照asd等)，
在1.3最后的启动eag服务的代码中，重新分析配置文件，然后转成eag2.0相关的dbus调用。
把1.3的show running去掉。
这样在升级后，保存一次配置，所有的配置应该就变成2.0的配置了。
在适当的2.0版本之后，再考虑将其中的1.3命令去掉。
这样的方案应该可以兼容大部分的配置，可能只会有及个别的配置因为实现的差异不能完全恢复。



