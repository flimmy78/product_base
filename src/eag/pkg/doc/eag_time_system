1、问题
    a、用户的在线时间是根据当前时间减去上线时间来完成的。
        如果当前系统的时间发生了突变，就会导致用户的在线时间计算错误。
    b、主备的时候，如果两个实例的时间不一致，会导致切换后，用户突然掉线或者在线时间计算错误。
    需要eag进程自己维护一个系统时间，来避免上面的情况。
    
2、实现方法
    初始化一个进程自己的时间实例(叫做“eag时间”，从地层获得的时间叫“系统时间”)，
       从进程启动，进入主循环的时候开始计时。
    主循环中需要获得的系统时间，然后和上一次获得的系统时间进行比较，可能有几种情况
    a、时间变大，小于一秒(正常情况)
        正常的时间变化，eag时间直接加上变化的时间。
    b、时间变大超过1s
        可能又有两种情况：
        1、代码消耗的时间超过1秒。
            这种情况逻辑上讲是不允许出现的。如果任何一个任务的处理超过了1秒中，都建议重新设计。
            这个1秒可以适当的增加，比如60秒，但不能太长了。
        2、系统时间发生了突变。
        上面两种情况在代码里面是没办法区分的，统一将eag时间+1秒。
    c、如果时间变小
        说明时间必然被调整过了，这种情况下，eag时间+1秒。
        
    所有的异常变化都应该有日志记录！如果太频繁的发生时间突变，可能是设计有问题。

3、其他细节
    a、用户的登陆时间。
        用户的session中记录的登陆时间是eag时间，如果外部需要计算登陆时间，
        只能通过当前系统的真实时间减去在线时长得到。
        这样如果用户登陆之后，系统时间变化过，其登陆时间也会发生一次改变。
    b、主备的时间同步
        主备定时同步一下eag时间。保证主备的eag时间一致。
        

    
    

