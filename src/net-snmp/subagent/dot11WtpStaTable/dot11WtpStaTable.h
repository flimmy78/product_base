/*
 * Note: this file originally auto-generated by mib2c using
 *       version : 1.32.2.3 $ of : mfd-top.m2c,v $
 *
 * $Id:$
 */
#ifndef DOT11WTPSTATABLE_H
#define DOT11WTPSTATABLE_H

#ifdef __cplusplus
extern "C" {
#endif


/** @defgroup misc misc: Miscelaneous routines
 *
 * @{
 */
#include <net-snmp/library/asn1.h>

/* other required module components */
    /* *INDENT-OFF*  */
config_require(DOT11-WTP-MIB/dot11WtpStaTable/dot11WtpStaTable_interface);
config_require(DOT11-WTP-MIB/dot11WtpStaTable/dot11WtpStaTable_data_access);
config_require(DOT11-WTP-MIB/dot11WtpStaTable/dot11WtpStaTable_data_get);
config_require(DOT11-WTP-MIB/dot11WtpStaTable/dot11WtpStaTable_data_set);
    /* *INDENT-ON*  */

/* OID and column number definitions for  */
#include "dot11WtpStaTable_oids.h"

/* enum definions */
#include "dot11WtpStaTable_enums.h"
#include "ws_dbus_list_interface.h"

/* *********************************************************************
 * function declarations
 */
void init_dot11WtpStaTable(void);

/* *********************************************************************
 * Table declarations
 */
/**********************************************************************
 **********************************************************************
 ***
 *** Table dot11WtpStaTable
 ***
 **********************************************************************
 **********************************************************************/
/*
 * dot11WtpStaTable is subid 1 of wtpStation.
 * Its status is Current.
 * OID: .1.3.6.1.4.1.31656.6.1.1.8.1, length: 12
*/
/* *********************************************************************
 * When you register your mib, you get to provide a generic
 * pointer that will be passed back to you for most of the
 * functions calls.
 *
 * TODO:100:r: Review all context structures
 */
    /*
     * TODO:101:o: |-> Review dot11WtpStaTable registration context.
     */
typedef netsnmp_data_list * dot11WtpStaTable_registration_ptr;

/**********************************************************************/
/*
 * TODO:110:r: |-> Review dot11WtpStaTable data context structure.
 * This structure is used to represent the data for dot11WtpStaTable.
 */
/*
 * This structure contains storage for all the columns defined in the
 * dot11WtpStaTable.
 */
typedef struct dot11WtpStaTable_data_s {
    
        /*
         * wtpStaIP(2)/IPADDR/ASN_IPADDRESS/u_long(u_long)//l/A/w/e/r/d/h
         */
   u_long   wtpStaIP;
    
        /*
         * wtpWirelessClientSNR(3)/INTEGER32/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
         */
   long   wtpWirelessClientSNR;
    
        /*
         * wtpTxTerminalPackMount(4)/COUNTER/ASN_COUNTER/u_long(u_long)//l/A/w/e/r/d/h
         */
   u_long   wtpTxTerminalPackMount;
    
        /*
         * wtpTxTerminalByteMount(5)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
   unsigned long long    wtpTxTerminalByteMount;
    
        /*
         * wtpTerminalRxPackMount(6)/COUNTER/ASN_COUNTER/u_long(u_long)//l/A/w/e/r/d/h
         */
   u_long   wtpTerminalRxPackMount;
    
        /*
         * wtpTerminalRxByteMount(7)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
   unsigned long long   wtpTerminalRxByteMount;
    
        /*
         * wtpTerminalResPack(8)/COUNTER/ASN_COUNTER/u_long(u_long)//l/A/w/e/r/d/h
         */
   u_long   wtpTerminalResPack;
    
        /*
         * wtpTerminalResByte(9)/COUNTER/ASN_COUNTER/u_long(u_long)//l/A/w/e/r/d/h
         */
   u_long   wtpTerminalResByte;
    
        /*
         * wtpTerminalRxErrPack(10)/COUNTER/ASN_COUNTER/u_long(u_long)//l/A/w/e/r/d/h
         */
   u_long   wtpTerminalRxErrPack;
    
        /*
         * wtpMacTermAddrUsrOnlineTime(11)/TICKS/ASN_TIMETICKS/u_long(u_long)//l/A/w/e/r/d/h
         */
   u_long   wtpMacTermAddrUsrOnlineTime;
    
        /*
         * wtpMacTermAddrUsrTxSpd(12)/COUNTER/ASN_COUNTER/u_long(u_long)//l/A/w/e/r/d/h
         */
   u_long   wtpMacTermAddrUsrTxSpd;
    
        /*
         * wtpMacTermAddrUsrRxSpd(13)/COUNTER/ASN_COUNTER/u_long(u_long)//l/A/w/e/r/d/h
         */
   u_long   wtpMacTermAddrUsrRxSpd;
    
        /*
         * wtpMacTermAddrUsrAllThroughput(14)/COUNTER/ASN_COUNTER/u_long(u_long)//l/A/w/e/r/d/h
         */
   u_long   wtpMacTermAddrUsrAllThroughput;
    
        /*
         * wtpMacTermAPReceivedStaSignalStrength(15)/DisplayString/ASN_OCTET_STR/char(char)//L/A/w/e/R/d/H
         */
   char   wtpMacTermAPReceivedStaSignalStrength[255];
size_t      wtpMacTermAPReceivedStaSignalStrength_len; /* # of char elements, not bytes */
    
        /*
         * wtpMacTermStaTxFragmentedPkts(16)/COUNTER/ASN_COUNTER/u_long(u_long)//l/A/w/e/r/d/h
         */
   u_long   wtpMacTermStaTxFragmentedPkts;
    
        /*
         * wtpMacTermAPTxFragmentedPkts(17)/COUNTER/ASN_COUNTER/u_long(u_long)//l/A/w/e/r/d/h
         */
   u_long   wtpMacTermAPTxFragmentedPkts;
    
        /*
         * wtpBelongAPID(18)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
         */
   long   wtpBelongAPID;
    
        /*
         * wtpTerminalAccessTime(19)/DisplayString/ASN_OCTET_STR/char(char)//L/A/w/e/R/d/H
         */
   char   wtpTerminalAccessTime[255];
size_t      wtpTerminalAccessTime_len; /* # of char elements, not bytes */
    
        /*
         * wtpBelongApName(21)/DisplayString/ASN_OCTET_STR/char(char)//L/A/w/e/R/d/H
         */
   char   wtpBelongApName[255];
size_t      wtpBelongApName_len; /* # of char elements, not bytes */

	unsigned long wtpTerminalRecvDataPackMount;
	unsigned long wtpSendTerminalDataPackMount;

	unsigned long wtpTerminalTxDataRatePkts[44];
	size_t wtpTerminalTxDataRatePkts_len;
	
	unsigned long wtpTerminalRxDataRatePkts[44];
	size_t wtpTerminalRxDataRatePkts_len;

	unsigned long wtpTerminalTxSignalStrengthPkts[17];
	size_t wtpTerminalTxSignalStrengthPkts_len;
	
	/*
         * APRxRates(27)/DisplayString/ASN_OCTET_STR/char(char)//L/A/w/e/R/d/H
         */
   char   APRxRates[64];
size_t      APRxRates_len; /* # of char elements, not bytes */

	/*
         * APTxRates(28)/DisplayString/ASN_OCTET_STR/char(char)//L/A/w/e/R/d/H
         */
   char   APTxRates[64];
size_t      APTxRates_len; /* # of char elements, not bytes */

	/*
         * MAXofRateset(29)/DisplayString/ASN_OCTET_STR/char(char)//L/A/w/e/R/d/H
         */
   char   MAXofRateset[64];
size_t      MAXofRateset_len; /* # of char elements, not bytes */
    
} dot11WtpStaTable_data;


/*
 * TODO:120:r: |-> Review dot11WtpStaTable mib index.
 * This structure is used to represent the index for dot11WtpStaTable.
 */
typedef struct dot11WtpStaTable_mib_index_s {

        /*
         * wtpMacAddr(1)/Dot11BaseWtpIdTC/ASN_OCTET_STR/char(char)//L/A/w/e/r/d/h
         */
        /** 128 - 1(other indexes) - oid length(14) = 112 */
   char   wtpMacAddr[112];
   size_t      wtpMacAddr_len;

        /*
         * wtpStaMacAddr(1)/DisplayString/ASN_OCTET_STR/char(char)//L/A/w/e/R/d/H
         */
        /** 128 - 1(other indexes) - oid length(14) = 112 */
   char   wtpStaMacAddr[112];
   size_t      wtpStaMacAddr_len;


} dot11WtpStaTable_mib_index;

    /*
     * TODO:121:r: |   |-> Review dot11WtpStaTable max index length.
     * If you KNOW that your indexes will never exceed a certain
     * length, update this macro to that length.
     *
     * BE VERY CAREFUL TO TAKE INTO ACCOUNT THE MAXIMUM
     * POSSIBLE LENGHT FOR EVERY VARIABLE LENGTH INDEX!
     * Guessing 128 - col/entry(2)  - oid len(12)
*/
#define MAX_dot11WtpStaTable_IDX_LEN     114


/* *********************************************************************
 * TODO:130:o: |-> Review dot11WtpStaTable Row request (rowreq) context.
 * When your functions are called, you will be passed a
 * dot11WtpStaTable_rowreq_ctx pointer.
 */
typedef struct dot11WtpStaTable_rowreq_ctx_s {

    /** this must be first for container compare to work */
    netsnmp_index        oid_idx;
    oid                  oid_tmp[MAX_dot11WtpStaTable_IDX_LEN];
    
    dot11WtpStaTable_mib_index        tbl_idx;
    
    dot11WtpStaTable_data              data;

    /*
     * flags per row. Currently, the first (lower) 8 bits are reserved
     * for the user. See mfd.h for other flags.
     */
    u_int                       rowreq_flags;

    /*
     * implementor's context pointer (provided during registration)
     */
    dot11WtpStaTable_registration_ptr dot11WtpStaTable_reg;

    /*
     * TODO:131:o: |   |-> Add useful data to dot11WtpStaTable rowreq context.
     */
    
    /*
     * storage for future expansion
     */
    netsnmp_data_list             *dot11WtpStaTable_data_list;

} dot11WtpStaTable_rowreq_ctx;

typedef struct dot11WtpStaTable_ref_rowreq_ctx_s {
    dot11WtpStaTable_rowreq_ctx *rowreq_ctx;
} dot11WtpStaTable_ref_rowreq_ctx;

/* *********************************************************************
 * function prototypes
 */
    int dot11WtpStaTable_pre_request(dot11WtpStaTable_registration_ptr user_context);
    int dot11WtpStaTable_post_request(dot11WtpStaTable_registration_ptr user_context);


extern oid dot11WtpStaTable_oid[];
extern int dot11WtpStaTable_oid_size;


#include "dot11WtpStaTable_interface.h"
#include "dot11WtpStaTable_data_access.h"
#include "dot11WtpStaTable_data_get.h"
#include "dot11WtpStaTable_data_set.h"

/*
 * DUMMY markers, ignore
 *
 * TODO:099:x: *************************************************************
 * TODO:199:x: *************************************************************
 * TODO:299:x: *************************************************************
 * TODO:399:x: *************************************************************
 * TODO:499:x: *************************************************************
 */

#ifdef __cplusplus
}
#endif

#endif /* DOT11WTPSTATABLE_H */
