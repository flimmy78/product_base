/*
 * Note: this file originally auto-generated by mib2c using
 *       version : 14170 $ of $
 *
 * $Id:$
 */
#ifndef DOT11PORTALNOAUTHENTICATEDTABLE_H
#define DOT11PORTALNOAUTHENTICATEDTABLE_H

#ifdef __cplusplus
extern "C" {
#endif


/** @addtogroup misc misc: Miscellaneous routines
 *
 * @{
 */
#include <net-snmp/library/asn1.h>

/* other required module components */
    /* *INDENT-OFF*  */
config_add_mib(DOT11-AC-MIB)
config_require(DOT11-AC-MIB/dot11PortalNoAuthenticatedTable/dot11PortalNoAuthenticatedTable_interface)
config_require(DOT11-AC-MIB/dot11PortalNoAuthenticatedTable/dot11PortalNoAuthenticatedTable_data_access)
config_require(DOT11-AC-MIB/dot11PortalNoAuthenticatedTable/dot11PortalNoAuthenticatedTable_data_get)
config_require(DOT11-AC-MIB/dot11PortalNoAuthenticatedTable/dot11PortalNoAuthenticatedTable_data_set)
    /* *INDENT-ON*  */

/* OID and column number definitions for dot11PortalNoAuthenticatedTable */
#include "dot11PortalNoAuthenticatedTable_oids.h"

/* enum definions */
#include "dot11PortalNoAuthenticatedTable_enums.h"
#include "ws_dbus_list_interface.h"

/* *********************************************************************
 * function declarations
 */
void init_dot11PortalNoAuthenticatedTable(void);
void shutdown_dot11PortalNoAuthenticatedTable(void);

/* *********************************************************************
 * Table declarations
 */
/**********************************************************************
 **********************************************************************
 ***
 *** Table dot11PortalNoAuthenticatedTable
 ***
 **********************************************************************
 **********************************************************************/
/*
 * DOT11-AC-MIB::dot11PortalNoAuthenticatedTable is subid 5 of dot11ConfigPortalServerGroup.
 * Its status is Current.
 * OID: .1.3.6.1.4.1.31656.6.1.2.23.5, length: 12
*/
/* *********************************************************************
 * When you register your mib, you get to provide a generic
 * pointer that will be passed back to you for most of the
 * functions calls.
 *
 * TODO:100:r: Review all context structures
 */
    /*
     * TODO:101:o: |-> Review dot11PortalNoAuthenticatedTable registration context.
     */
typedef netsnmp_data_list dot11PortalNoAuthenticatedTable_registration;

/**********************************************************************/
/*
 * TODO:110:r: |-> Review dot11PortalNoAuthenticatedTable data context structure.
 * This structure is used to represent the data for dot11PortalNoAuthenticatedTable.
 */
/*
 * This structure contains storage for all the columns defined in the
 * dot11PortalNoAuthenticatedTable.
 */
typedef struct dot11PortalNoAuthenticatedTable_data_s {
	
   unsigned int CaptiveLocalId;  

   dbus_parameter parameter;
    
        /*
         * NoAuthRowStatus(3)/RowStatus/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   NoAuthRowStatus;
    
} dot11PortalNoAuthenticatedTable_data;


/* *********************************************************************
 * TODO:115:o: |-> Review dot11PortalNoAuthenticatedTable undo context.
 * We're just going to use the same data structure for our
 * undo_context. If you want to do something more efficent,
 * define your typedef here.
 */
typedef dot11PortalNoAuthenticatedTable_data dot11PortalNoAuthenticatedTable_undo_data;

/*
 * TODO:120:r: |-> Review dot11PortalNoAuthenticatedTable mib index.
 * This structure is used to represent the index for dot11PortalNoAuthenticatedTable.
 */
typedef struct dot11PortalNoAuthenticatedTable_mib_index_s {

        /*
         * CaptiveId(1)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/R/d/h
         */
   long   CaptiveId;

        /*
         * CaptiveInterface(2)/DisplayString/ASN_OCTET_STR/char(char)//L/A/W/e/R/d/H
         */
        /** 128 - 1(other indexes) - oid length(14) = 112 */
   char   CaptiveInterface[128];
   size_t      CaptiveInterface_len;


} dot11PortalNoAuthenticatedTable_mib_index;

    /*
     * TODO:121:r: |   |-> Review dot11PortalNoAuthenticatedTable max index length.
     * If you KNOW that your indexes will never exceed a certain
     * length, update this macro to that length.
     *
     * BE VERY CAREFUL TO TAKE INTO ACCOUNT THE MAXIMUM
     * POSSIBLE LENGHT FOR EVERY VARIABLE LENGTH INDEX!
     * Guessing 128 - col/entry(2)  - oid len(12)
*/
#define MAX_dot11PortalNoAuthenticatedTable_IDX_LEN     114


/* *********************************************************************
 * TODO:130:o: |-> Review dot11PortalNoAuthenticatedTable Row request (rowreq) context.
 * When your functions are called, you will be passed a
 * dot11PortalNoAuthenticatedTable_rowreq_ctx pointer.
 */
typedef struct dot11PortalNoAuthenticatedTable_rowreq_ctx_s {

    /** this must be first for container compare to work */
    netsnmp_index        oid_idx;
    oid                  oid_tmp[MAX_dot11PortalNoAuthenticatedTable_IDX_LEN];
    
    dot11PortalNoAuthenticatedTable_mib_index        tbl_idx;
    
    dot11PortalNoAuthenticatedTable_data              data;
    dot11PortalNoAuthenticatedTable_undo_data       * undo;
    unsigned int                column_set_flags; /* flags for set columns */


    /*
     * flags per row. Currently, the first (lower) 8 bits are reserved
     * for the user. See mfd.h for other flags.
     */
    u_int                       rowreq_flags;

    /*
     * TODO:131:o: |   |-> Add useful data to dot11PortalNoAuthenticatedTable rowreq context.
     */
    
    /*
     * storage for future expansion
     */
    netsnmp_data_list             *dot11PortalNoAuthenticatedTable_data_list;

} dot11PortalNoAuthenticatedTable_rowreq_ctx;

typedef struct dot11PortalNoAuthenticatedTable_ref_rowreq_ctx_s {
    dot11PortalNoAuthenticatedTable_rowreq_ctx *rowreq_ctx;
} dot11PortalNoAuthenticatedTable_ref_rowreq_ctx;

/* *********************************************************************
 * function prototypes
 */
    int dot11PortalNoAuthenticatedTable_pre_request(dot11PortalNoAuthenticatedTable_registration * user_context);
    int dot11PortalNoAuthenticatedTable_post_request(dot11PortalNoAuthenticatedTable_registration * user_context,
        int rc);

    int dot11PortalNoAuthenticatedTable_rowreq_ctx_init(dot11PortalNoAuthenticatedTable_rowreq_ctx *rowreq_ctx,
                                   void *user_init_ctx);
    void dot11PortalNoAuthenticatedTable_rowreq_ctx_cleanup(dot11PortalNoAuthenticatedTable_rowreq_ctx *rowreq_ctx);

    int dot11PortalNoAuthenticatedTable_check_dependencies(dot11PortalNoAuthenticatedTable_rowreq_ctx * rowreq_ctx); 
    int dot11PortalNoAuthenticatedTable_commit(dot11PortalNoAuthenticatedTable_rowreq_ctx * rowreq_ctx);

    dot11PortalNoAuthenticatedTable_rowreq_ctx *
                  dot11PortalNoAuthenticatedTable_row_find_by_mib_index(dot11PortalNoAuthenticatedTable_mib_index *mib_idx);

extern oid dot11PortalNoAuthenticatedTable_oid[];
extern int dot11PortalNoAuthenticatedTable_oid_size;


#include "dot11PortalNoAuthenticatedTable_interface.h"
#include "dot11PortalNoAuthenticatedTable_data_access.h"
#include "dot11PortalNoAuthenticatedTable_data_get.h"
#include "dot11PortalNoAuthenticatedTable_data_set.h"

/*
 * DUMMY markers, ignore
 *
 * TODO:099:x: *************************************************************
 * TODO:199:x: *************************************************************
 * TODO:299:x: *************************************************************
 * TODO:399:x: *************************************************************
 * TODO:499:x: *************************************************************
 */

#ifdef __cplusplus
}
#endif

#endif /* DOT11PORTALNOAUTHENTICATEDTABLE_H */
/** @} */
