/*
 * Note: this file originally auto-generated by mib2c using
 *       version : 14170 $ of $
 *
 * $Id:$
 */
#ifndef DOT11ACPHYPORTCAPABILITYTABLE_H
#define DOT11ACPHYPORTCAPABILITYTABLE_H

#ifdef __cplusplus
extern "C" {
#endif


/** @addtogroup misc misc: Miscellaneous routines
 *
 * @{
 */
#include <net-snmp/library/asn1.h>

/* other required module components */
    /* *INDENT-OFF*  */
config_add_mib(DOT11-AC-MIB)
config_require(DOT11-AC-MIB/dot11AcPhyPortCapabilityTable/dot11AcPhyPortCapabilityTable_interface)
config_require(DOT11-AC-MIB/dot11AcPhyPortCapabilityTable/dot11AcPhyPortCapabilityTable_data_access)
config_require(DOT11-AC-MIB/dot11AcPhyPortCapabilityTable/dot11AcPhyPortCapabilityTable_data_get)
config_require(DOT11-AC-MIB/dot11AcPhyPortCapabilityTable/dot11AcPhyPortCapabilityTable_data_set)
    /* *INDENT-ON*  */

/* OID and column number definitions for dot11AcPhyPortCapabilityTable */
#include "dot11AcPhyPortCapabilityTable_oids.h"

/* enum definions */
#include "dot11AcPhyPortCapabilityTable_enums.h"

/* *********************************************************************
 * function declarations
 */
void init_dot11AcPhyPortCapabilityTable(void);
void shutdown_dot11AcPhyPortCapabilityTable(void);

/* *********************************************************************
 * Table declarations
 */
/**********************************************************************
 **********************************************************************
 ***
 *** Table dot11AcPhyPortCapabilityTable
 ***
 **********************************************************************
 **********************************************************************/
/*
 * DOT11-AC-MIB::dot11AcPhyPortCapabilityTable is subid 7 of dot11AcInterface.
 * Its status is Current.
 * OID: .1.3.6.1.4.1.31656.6.1.2.4.7, length: 12
*/
/* *********************************************************************
 * When you register your mib, you get to provide a generic
 * pointer that will be passed back to you for most of the
 * functions calls.
 *
 * TODO:100:r: Review all context structures
 */
    /*
     * TODO:101:o: |-> Review dot11AcPhyPortCapabilityTable registration context.
     */
typedef netsnmp_data_list dot11AcPhyPortCapabilityTable_registration;

/**********************************************************************/
/*
 * TODO:110:r: |-> Review dot11AcPhyPortCapabilityTable data context structure.
 * This structure is used to represent the data for dot11AcPhyPortCapabilityTable.
 */
/*
 * This structure contains storage for all the columns defined in the
 * dot11AcPhyPortCapabilityTable.
 */
typedef struct dot11AcPhyPortCapabilityTable_data_s {
    
        /*
         * acPhyPortInUcastPkts(1)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
   unsigned long long   acPhyPortInUcastPkts;
    
        /*
         * acPhyPortInNUcastPkts(2)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
   unsigned long long   acPhyPortInNUcastPkts;
    
        /*
         * acPhyPortInOctets(3)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
   unsigned long long   acPhyPortInOctets;
    
        /*
         * acPhyPortInDiscardPkts(4)/COUNTER/ASN_COUNTER/u_long(u_long)//l/A/w/e/r/d/h
         */
   u_long   acPhyPortInDiscardPkts;
    
        /*
         * acPhyPortInErrors(5)/COUNTER/ASN_COUNTER/u_long(u_long)//l/A/w/e/r/d/h
         */
   u_long   acPhyPortInErrors;
    
        /*
         * acPhyPortOutUcastPkts(6)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
   unsigned long long   acPhyPortOutUcastPkts;
    
        /*
         * acPhyPortOutNUcastPkts(7)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
   unsigned long long   acPhyPortOutNUcastPkts;
    
        /*
         * acPhyPortOutOctets(8)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
   unsigned long long   acPhyPortOutOctets;
    
        /*
         * acPhyPortOutDiscardPkts(9)/COUNTER/ASN_COUNTER/u_long(u_long)//l/A/w/e/r/d/h
         */
   u_long   acPhyPortOutDiscardPkts;
    
        /*
         * acPhyPortOutErrors(10)/COUNTER/ASN_COUNTER/u_long(u_long)//l/A/w/e/r/d/h
         */
   u_long   acPhyPortOutErrors;
    
        /*
         * acPhyPortInMulticastPkts(11)/COUNTER/ASN_COUNTER/u_long(u_long)//l/A/w/e/r/d/h
         */
   u_long   acPhyPortInMulticastPkts;
    
        /*
         * acPhyPortOutMulticastPkts(12)/COUNTER/ASN_COUNTER/u_long(u_long)//l/A/w/e/r/d/h
         */
   u_long   acPhyPortOutMulticastPkts;
    
} dot11AcPhyPortCapabilityTable_data;


/*
 * TODO:120:r: |-> Review dot11AcPhyPortCapabilityTable mib index.
 * This structure is used to represent the index for dot11AcPhyPortCapabilityTable.
 */
typedef struct dot11AcPhyPortCapabilityTable_mib_index_s {

        /*
         * PhyPortIndex(1)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
         */
   long   PhyPortIndex;


} dot11AcPhyPortCapabilityTable_mib_index;

    /*
     * TODO:121:r: |   |-> Review dot11AcPhyPortCapabilityTable max index length.
     * If you KNOW that your indexes will never exceed a certain
     * length, update this macro to that length.
*/
#define MAX_dot11AcPhyPortCapabilityTable_IDX_LEN     1


/* *********************************************************************
 * TODO:130:o: |-> Review dot11AcPhyPortCapabilityTable Row request (rowreq) context.
 * When your functions are called, you will be passed a
 * dot11AcPhyPortCapabilityTable_rowreq_ctx pointer.
 */
typedef struct dot11AcPhyPortCapabilityTable_rowreq_ctx_s {

    /** this must be first for container compare to work */
    netsnmp_index        oid_idx;
    oid                  oid_tmp[MAX_dot11AcPhyPortCapabilityTable_IDX_LEN];
    
    dot11AcPhyPortCapabilityTable_mib_index        tbl_idx;
    
    dot11AcPhyPortCapabilityTable_data              data;

    /*
     * flags per row. Currently, the first (lower) 8 bits are reserved
     * for the user. See mfd.h for other flags.
     */
    u_int                       rowreq_flags;

    /*
     * TODO:131:o: |   |-> Add useful data to dot11AcPhyPortCapabilityTable rowreq context.
     */
    
    /*
     * storage for future expansion
     */
    netsnmp_data_list             *dot11AcPhyPortCapabilityTable_data_list;

} dot11AcPhyPortCapabilityTable_rowreq_ctx;

typedef struct dot11AcPhyPortCapabilityTable_ref_rowreq_ctx_s {
    dot11AcPhyPortCapabilityTable_rowreq_ctx *rowreq_ctx;
} dot11AcPhyPortCapabilityTable_ref_rowreq_ctx;

/* *********************************************************************
 * function prototypes
 */
    int dot11AcPhyPortCapabilityTable_pre_request(dot11AcPhyPortCapabilityTable_registration * user_context);
    int dot11AcPhyPortCapabilityTable_post_request(dot11AcPhyPortCapabilityTable_registration * user_context,
        int rc);

    int dot11AcPhyPortCapabilityTable_rowreq_ctx_init(dot11AcPhyPortCapabilityTable_rowreq_ctx *rowreq_ctx,
                                   void *user_init_ctx);
    void dot11AcPhyPortCapabilityTable_rowreq_ctx_cleanup(dot11AcPhyPortCapabilityTable_rowreq_ctx *rowreq_ctx);


    dot11AcPhyPortCapabilityTable_rowreq_ctx *
                  dot11AcPhyPortCapabilityTable_row_find_by_mib_index(dot11AcPhyPortCapabilityTable_mib_index *mib_idx);

extern oid dot11AcPhyPortCapabilityTable_oid[];
extern int dot11AcPhyPortCapabilityTable_oid_size;


#include "dot11AcPhyPortCapabilityTable_interface.h"
#include "dot11AcPhyPortCapabilityTable_data_access.h"
#include "dot11AcPhyPortCapabilityTable_data_get.h"
#include "dot11AcPhyPortCapabilityTable_data_set.h"

/*
 * DUMMY markers, ignore
 *
 * TODO:099:x: *************************************************************
 * TODO:199:x: *************************************************************
 * TODO:299:x: *************************************************************
 * TODO:399:x: *************************************************************
 * TODO:499:x: *************************************************************
 */

#ifdef __cplusplus
}
#endif

#endif /* DOT11ACPHYPORTCAPABILITYTABLE_H */
/** @} */
