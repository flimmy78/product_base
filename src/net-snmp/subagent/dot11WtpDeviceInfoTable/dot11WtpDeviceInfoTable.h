/*
 * Note: this file originally auto-generated by mib2c using
 *       version : 1.32.2.3 $ of : mfd-top.m2c,v $
 *
 * $Id:$
 */
#ifndef DOT11WTPDEVICEINFOTABLE_H
#define DOT11WTPDEVICEINFOTABLE_H

#ifdef __cplusplus
extern "C" {
#endif


/** @defgroup misc misc: Miscelaneous routines
 *
 * @{
 */
#include <net-snmp/library/asn1.h>

/* other required module components */
    /* *INDENT-OFF*  */
config_require(DOT11-WTP-MIB/dot11WtpDeviceInfoTable/dot11WtpDeviceInfoTable_interface);
config_require(DOT11-WTP-MIB/dot11WtpDeviceInfoTable/dot11WtpDeviceInfoTable_data_access);
config_require(DOT11-WTP-MIB/dot11WtpDeviceInfoTable/dot11WtpDeviceInfoTable_data_get);
config_require(DOT11-WTP-MIB/dot11WtpDeviceInfoTable/dot11WtpDeviceInfoTable_data_set);
    /* *INDENT-ON*  */

/* OID and column number definitions for  */
#include "dot11WtpDeviceInfoTable_oids.h"

/* enum definions */
#include "dot11WtpDeviceInfoTable_enums.h"
#include "ws_dbus_list_interface.h"

/* *********************************************************************
 * function declarations
 */
void init_dot11WtpDeviceInfoTable(void);

/* *********************************************************************
 * Table declarations
 */
/**********************************************************************
 **********************************************************************
 ***
 *** Table dot11WtpDeviceInfoTable
 ***
 **********************************************************************
 **********************************************************************/
/*
 * dot11WtpDeviceInfoTable is subid 2 of wtpGeneralInfo.
 * Its status is Current.
 * OID: .1.3.6.1.4.1.31656.6.1.1.1.2, length: 12
*/
/* *********************************************************************
 * When you register your mib, you get to provide a generic
 * pointer that will be passed back to you for most of the
 * functions calls.
 *
 * TODO:100:r: Review all context structures
 */
    /*
     * TODO:101:o: |-> Review dot11WtpDeviceInfoTable registration context.
     */
typedef netsnmp_data_list * dot11WtpDeviceInfoTable_registration_ptr;

/**********************************************************************/
/*
 * TODO:110:r: |-> Review dot11WtpDeviceInfoTable data context structure.
 * This structure is used to represent the data for dot11WtpDeviceInfoTable.
 */
/*
 * This structure contains storage for all the columns defined in the
 * dot11WtpDeviceInfoTable.
 */
typedef struct dot11WtpDeviceInfoTable_data_s {

	dbus_parameter parameter;
	
	long wtpCurrID;
    
        /*
         * wtpCPUType(1)/DisplayString/ASN_OCTET_STR/char(char)//L/A/w/e/R/d/H
         */
   char   wtpCPUType[255];
size_t      wtpCPUType_len; /* # of char elements, not bytes */
    
        /*
         * wtpCPUProcessAbility(2)/DisplayString/ASN_OCTET_STR/char(char)//L/A/w/e/R/d/H
         */
   char   wtpCPUProcessAbility[255];
size_t      wtpCPUProcessAbility_len; /* # of char elements, not bytes */
    
        /*
         * wtpCPURTUsage(3)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
         */
   long   wtpCPURTUsage;
    
        /*
         * wtpCPUPeakUsage(4)/DisplayString/ASN_OCTET_STR/char(char)//L/A/w/e/R/d/H
         */
   char   wtpCPUPeakUsage[255];
size_t      wtpCPUPeakUsage_len; /* # of char elements, not bytes */
    
        /*
         * wtpCPUAvgUsage(5)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
         */
   long   wtpCPUAvgUsage;
    
        /*
         * wtpCPUusageThreshhd(6)/INTEGER/ASN_INTEGER/long(long)//l/A/W/e/r/d/h
         */
   long   wtpCPUusageThreshhd;
    
        /*
         * wtpMemoryType(7)/DisplayString/ASN_OCTET_STR/char(char)//L/A/w/e/R/d/H
         */
   char   wtpMemoryType[255];
size_t      wtpMemoryType_len; /* # of char elements, not bytes */
    
        /*
         * wtpMemoryCapacity(8)/GAUGE/ASN_GAUGE/u_long(u_long)//l/A/w/e/r/d/h
         */
   u_long   wtpMemoryCapacity;
    
        /*
         * wtpMemRTUsage(9)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
         */
   long   wtpMemRTUsage;
    
        /*
         * wtpMemPeakUsage(10)/DisplayString/ASN_OCTET_STR/char(char)//L/A/w/e/R/d/H
         */
   char   wtpMemPeakUsage[255];
size_t      wtpMemPeakUsage_len; /* # of char elements, not bytes */
    
        /*
         * wtpMemAvgUsage(11)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
         */
   long   wtpMemAvgUsage;
    
        /*
         * wtpMemUsageThreshhd(12)/INTEGER/ASN_INTEGER/long(long)//l/A/W/e/r/d/h
         */
   long   wtpMemUsageThreshhd;
    
        /*
         * wtpFlashType(13)/DisplayString/ASN_OCTET_STR/char(char)//L/A/w/e/R/d/H
         */
   char   wtpFlashType[255];
size_t      wtpFlashType_len; /* # of char elements, not bytes */
    
        /*
         * wtpFlashCapacity(14)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
         */
   long   wtpFlashCapacity;
    
        /*
         * wtpFlashRemain(15)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
         */
   long   wtpFlashRemain;
    
        /*
         * wtpWayGetIP(16)/INTEGER/ASN_INTEGER/long(u_long)//l/A/w/E/r/d/h
         */
   u_long   wtpWayGetIP;
    
        /*
         * wtpWorkTemp(17)/DisplayString/ASN_OCTET_STR/char(char)//L/A/w/e/R/d/H
         */
   char   wtpWorkTemp[255];
size_t      wtpWorkTemp_len; /* # of char elements, not bytes */
    
        /*
         * wtpIP(18)/IPADDR/ASN_IPADDRESS/u_long(u_long)//l/A/w/e/r/d/h
         */
   u_long   wtpIP;
    
} dot11WtpDeviceInfoTable_data;


/* *********************************************************************
 * TODO:115:o: |-> Review dot11WtpDeviceInfoTable undo context.
 * We're just going to use the same data structure for our
 * undo_context. If you want to do something more efficent,
 * define your typedef here.
 */
typedef dot11WtpDeviceInfoTable_data dot11WtpDeviceInfoTable_undo_data;

/*
 * TODO:120:r: |-> Review dot11WtpDeviceInfoTable mib index.
 * This structure is used to represent the index for dot11WtpDeviceInfoTable.
 */
typedef struct dot11WtpDeviceInfoTable_mib_index_s {

        /*
         * wtpMacAddr(1)/Dot11BaseWtpIdTC/ASN_OCTET_STR/char(char)//L/A/w/e/r/d/h
         */
        /** 128 - 0(other indexes) - oid length(14) = 113 */
   char   wtpMacAddr[113];
   size_t      wtpMacAddr_len;


} dot11WtpDeviceInfoTable_mib_index;

    /*
     * TODO:121:r: |   |-> Review dot11WtpDeviceInfoTable max index length.
     * If you KNOW that your indexes will never exceed a certain
     * length, update this macro to that length.
     *
     * BE VERY CAREFUL TO TAKE INTO ACCOUNT THE MAXIMUM
     * POSSIBLE LENGHT FOR EVERY VARIABLE LENGTH INDEX!
     * Guessing 128 - col/entry(2)  - oid len(12)
*/
#define MAX_dot11WtpDeviceInfoTable_IDX_LEN     114


/* *********************************************************************
 * TODO:130:o: |-> Review dot11WtpDeviceInfoTable Row request (rowreq) context.
 * When your functions are called, you will be passed a
 * dot11WtpDeviceInfoTable_rowreq_ctx pointer.
 */
typedef struct dot11WtpDeviceInfoTable_rowreq_ctx_s {

    /** this must be first for container compare to work */
    netsnmp_index        oid_idx;
    oid                  oid_tmp[MAX_dot11WtpDeviceInfoTable_IDX_LEN];
    
    dot11WtpDeviceInfoTable_mib_index        tbl_idx;
    
    dot11WtpDeviceInfoTable_data              data;
    dot11WtpDeviceInfoTable_undo_data       * undo;
    unsigned int                column_set_flags; /* flags for set columns */


    /*
     * flags per row. Currently, the first (lower) 8 bits are reserved
     * for the user. See mfd.h for other flags.
     */
    u_int                       rowreq_flags;

    /*
     * implementor's context pointer (provided during registration)
     */
    dot11WtpDeviceInfoTable_registration_ptr dot11WtpDeviceInfoTable_reg;

    /*
     * TODO:131:o: |   |-> Add useful data to dot11WtpDeviceInfoTable rowreq context.
     */
    
    /*
     * storage for future expansion
     */
    netsnmp_data_list             *dot11WtpDeviceInfoTable_data_list;

} dot11WtpDeviceInfoTable_rowreq_ctx;

typedef struct dot11WtpDeviceInfoTable_ref_rowreq_ctx_s {
    dot11WtpDeviceInfoTable_rowreq_ctx *rowreq_ctx;
} dot11WtpDeviceInfoTable_ref_rowreq_ctx;

/* *********************************************************************
 * function prototypes
 */
    int dot11WtpDeviceInfoTable_pre_request(dot11WtpDeviceInfoTable_registration_ptr user_context);
    int dot11WtpDeviceInfoTable_post_request(dot11WtpDeviceInfoTable_registration_ptr user_context);

    int dot11WtpDeviceInfoTable_check_dependencies(dot11WtpDeviceInfoTable_rowreq_ctx * rowreq_ctx); 
    int dot11WtpDeviceInfoTable_commit(dot11WtpDeviceInfoTable_rowreq_ctx * rowreq_ctx);

extern oid dot11WtpDeviceInfoTable_oid[];
extern int dot11WtpDeviceInfoTable_oid_size;


#include "dot11WtpDeviceInfoTable_interface.h"
#include "dot11WtpDeviceInfoTable_data_access.h"
#include "dot11WtpDeviceInfoTable_data_get.h"
#include "dot11WtpDeviceInfoTable_data_set.h"

/*
 * DUMMY markers, ignore
 *
 * TODO:099:x: *************************************************************
 * TODO:199:x: *************************************************************
 * TODO:299:x: *************************************************************
 * TODO:399:x: *************************************************************
 * TODO:499:x: *************************************************************
 */

#ifdef __cplusplus
}
#endif

#endif /* DOT11WTPDEVICEINFOTABLE_H */
