/*
 * Note: this file originally auto-generated by mib2c using
 *       version : 1.32.2.3 $ of : mfd-top.m2c,v $
 *
 * $Id:$
 */
#ifndef DOT11ACIFCAPABILITYTABLE_H
#define DOT11ACIFCAPABILITYTABLE_H

#ifdef __cplusplus
extern "C" {
#endif


/** @defgroup misc misc: Miscelaneous routines
 *
 * @{
 */
#include <net-snmp/library/asn1.h>

/* other required module components */
    /* *INDENT-OFF*  */
config_require(DOT11-AC-MIB/dot11AcIfCapabilityTable/dot11AcIfCapabilityTable_interface);
config_require(DOT11-AC-MIB/dot11AcIfCapabilityTable/dot11AcIfCapabilityTable_data_access);
config_require(DOT11-AC-MIB/dot11AcIfCapabilityTable/dot11AcIfCapabilityTable_data_get);
config_require(DOT11-AC-MIB/dot11AcIfCapabilityTable/dot11AcIfCapabilityTable_data_set);
    /* *INDENT-ON*  */

/* OID and column number definitions for  */
#include "dot11AcIfCapabilityTable_oids.h"

/* enum definions */
#include "dot11AcIfCapabilityTable_enums.h"

/* *********************************************************************
 * function declarations
 */
void init_dot11AcIfCapabilityTable(void);

/* *********************************************************************
 * Table declarations
 */
/**********************************************************************
 **********************************************************************
 ***
 *** Table dot11AcIfCapabilityTable
 ***
 **********************************************************************
 **********************************************************************/
/*
 * dot11AcIfCapabilityTable is subid 3 of dot11AcInterface.
 * Its status is Current.
 * OID: .1.3.6.1.4.1.31656.6.1.2.4.3, length: 12
*/
/* *********************************************************************
 * When you register your mib, you get to provide a generic
 * pointer that will be passed back to you for most of the
 * functions calls.
 *
 * TODO:100:r: Review all context structures
 */
    /*
     * TODO:101:o: |-> Review dot11AcIfCapabilityTable registration context.
     */
typedef netsnmp_data_list * dot11AcIfCapabilityTable_registration_ptr;

/**********************************************************************/
/*
 * TODO:110:r: |-> Review dot11AcIfCapabilityTable data context structure.
 * This structure is used to represent the data for dot11AcIfCapabilityTable.
 */
/*
 * This structure contains storage for all the columns defined in the
 * dot11AcIfCapabilityTable.
 */
typedef struct dot11AcIfCapabilityTable_data_s {
    
        /*
         * acIfInUcastPkts(1)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
   unsigned long long   acIfInUcastPkts;
    
        /*
         * acIfInNUcastPkts(2)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
   unsigned long long   acIfInNUcastPkts;
    
        /*
         * acIfInOctets(3)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
   unsigned long long   acIfInOctets;
    
        /*
         * acIfInDiscardPkts(4)/COUNTER/ASN_COUNTER/u_long(u_long)//l/A/w/e/r/d/h
         */
   u_long   acIfInDiscardPkts;
    
        /*
         * acIfInErrors(5)/COUNTER/ASN_COUNTER/u_long(u_long)//l/A/w/e/r/d/h
         */
   u_long   acIfInErrors;
    
        /*
         * acIfOutUcastPkts(6)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
   unsigned long long   acIfOutUcastPkts;
    
        /*
         * acIfOutNUcastPkts(7)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
   unsigned long long   acIfOutNUcastPkts;
    
        /*
         * acIfOutOctets(8)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
   unsigned long long   acIfOutOctets;
    
        /*
         * acIfOutDiscardPkts(9)/COUNTER/ASN_COUNTER/u_long(u_long)//l/A/w/e/r/d/h
         */
   u_long   acIfOutDiscardPkts;
    
        /*
         * acIfOutErrors(10)/COUNTER/ASN_COUNTER/u_long(u_long)//l/A/w/e/r/d/h
         */
   u_long   acIfOutErrors;
    
        /*
         * acIfUpDwnTimes(11)/COUNTER/ASN_COUNTER/u_long(u_long)//l/A/w/e/r/d/h
         */
   u_long   acIfUpDwnTimes;
    
        /*
         * acIfInMulticastPkts(12)/COUNTER/ASN_COUNTER/u_long(u_long)//l/A/w/e/r/d/h
         */
   u_long   acIfInMulticastPkts;
    
        /*
         * acIfOutMulticastPkts(13)/COUNTER/ASN_COUNTER/u_long(u_long)//l/A/w/e/r/d/h
         */
   u_long   acIfOutMulticastPkts;
    
        /*
         * acUplinkRate(14)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
   unsigned long long   acUplinkRate;
    
        /*
         * acDownlinkRate(15)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
   unsigned long long   acDownlinkRate;

   u_long  acBandwidthUsage;

   u_long  acDropUsage;

   u_long acIfOutBroadcastPkts;

   u_long acUplinkKbyteRate;
   
   u_long acDownlinkKbyteRate;
} dot11AcIfCapabilityTable_data;


/*
 * TODO:120:r: |-> Review dot11AcIfCapabilityTable mib index.
 * This structure is used to represent the index for dot11AcIfCapabilityTable.
 */
typedef struct dot11AcIfCapabilityTable_mib_index_s {

        /*
         * ifIndex(1)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
         */
   long   ifIndex;


} dot11AcIfCapabilityTable_mib_index;

    /*
     * TODO:121:r: |   |-> Review dot11AcIfCapabilityTable max index length.
     * If you KNOW that your indexes will never exceed a certain
     * length, update this macro to that length.
*/
#define MAX_dot11AcIfCapabilityTable_IDX_LEN     1


/* *********************************************************************
 * TODO:130:o: |-> Review dot11AcIfCapabilityTable Row request (rowreq) context.
 * When your functions are called, you will be passed a
 * dot11AcIfCapabilityTable_rowreq_ctx pointer.
 */
typedef struct dot11AcIfCapabilityTable_rowreq_ctx_s {

    /** this must be first for container compare to work */
    netsnmp_index        oid_idx;
    oid                  oid_tmp[MAX_dot11AcIfCapabilityTable_IDX_LEN];
    
    dot11AcIfCapabilityTable_mib_index        tbl_idx;
    
    dot11AcIfCapabilityTable_data              data;

    /*
     * flags per row. Currently, the first (lower) 8 bits are reserved
     * for the user. See mfd.h for other flags.
     */
    u_int                       rowreq_flags;

    /*
     * implementor's context pointer (provided during registration)
     */
    dot11AcIfCapabilityTable_registration_ptr dot11AcIfCapabilityTable_reg;

    /*
     * TODO:131:o: |   |-> Add useful data to dot11AcIfCapabilityTable rowreq context.
     */
    
    /*
     * storage for future expansion
     */
    netsnmp_data_list             *dot11AcIfCapabilityTable_data_list;

} dot11AcIfCapabilityTable_rowreq_ctx;

typedef struct dot11AcIfCapabilityTable_ref_rowreq_ctx_s {
    dot11AcIfCapabilityTable_rowreq_ctx *rowreq_ctx;
} dot11AcIfCapabilityTable_ref_rowreq_ctx;

/* *********************************************************************
 * function prototypes
 */
    int dot11AcIfCapabilityTable_pre_request(dot11AcIfCapabilityTable_registration_ptr user_context);
    int dot11AcIfCapabilityTable_post_request(dot11AcIfCapabilityTable_registration_ptr user_context);


extern oid dot11AcIfCapabilityTable_oid[];
extern int dot11AcIfCapabilityTable_oid_size;


#include "dot11AcIfCapabilityTable_interface.h"
#include "dot11AcIfCapabilityTable_data_access.h"
#include "dot11AcIfCapabilityTable_data_get.h"
#include "dot11AcIfCapabilityTable_data_set.h"

/*
 * DUMMY markers, ignore
 *
 * TODO:099:x: *************************************************************
 * TODO:199:x: *************************************************************
 * TODO:299:x: *************************************************************
 * TODO:399:x: *************************************************************
 * TODO:499:x: *************************************************************
 */

#ifdef __cplusplus
}
#endif

#endif /* DOT11ACIFCAPABILITYTABLE_H */
