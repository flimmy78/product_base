/*
 * Note: this file originally auto-generated by mib2c using
 *       version : 14170 $ of $
 *
 * $Id:$
 */
#ifndef DOT11SSIDCONFIGTABLE_H
#define DOT11SSIDCONFIGTABLE_H

#ifdef __cplusplus
extern "C" {
#endif


/** @addtogroup misc misc: Miscellaneous routines
 *
 * @{
 */
#include <net-snmp/library/asn1.h>

/* other required module components */
    /* *INDENT-OFF*  */
config_add_mib(DOT11-AC-MIB)
config_require(DOT11-AC-MIB/dot11SSIDConfigTable/dot11SSIDConfigTable_interface)
config_require(DOT11-AC-MIB/dot11SSIDConfigTable/dot11SSIDConfigTable_data_access)
config_require(DOT11-AC-MIB/dot11SSIDConfigTable/dot11SSIDConfigTable_data_get)
config_require(DOT11-AC-MIB/dot11SSIDConfigTable/dot11SSIDConfigTable_data_set)
    /* *INDENT-ON*  */

/* OID and column number definitions for dot11SSIDConfigTable */
#include "dot11SSIDConfigTable_oids.h"

/* enum definions */
#include "dot11SSIDConfigTable_enums.h"
#include "ws_dbus_list_interface.h"

/* *********************************************************************
 * function declarations
 */
void init_dot11SSIDConfigTable(void);
void shutdown_dot11SSIDConfigTable(void);

/* *********************************************************************
 * Table declarations
 */
/**********************************************************************
 **********************************************************************
 ***
 *** Table dot11SSIDConfigTable
 ***
 **********************************************************************
 **********************************************************************/
/*
 * DOT11-AC-MIB::dot11SSIDConfigTable is subid 6 of dot11wlanConfig.
 * Its status is Current.
 * OID: .1.3.6.1.4.1.31656.6.1.2.13.6, length: 12
*/
/* *********************************************************************
 * When you register your mib, you get to provide a generic
 * pointer that will be passed back to you for most of the
 * functions calls.
 *
 * TODO:100:r: Review all context structures
 */
    /*
     * TODO:101:o: |-> Review dot11SSIDConfigTable registration context.
     */
typedef netsnmp_data_list dot11SSIDConfigTable_registration;

/**********************************************************************/
/*
 * TODO:110:r: |-> Review dot11SSIDConfigTable data context structure.
 * This structure is used to represent the data for dot11SSIDConfigTable.
 */
/*
 * This structure contains storage for all the columns defined in the
 * dot11SSIDConfigTable.
 */
typedef struct dot11SSIDConfigTable_data_s {

   dbus_parameter parameter;	

   long wlanLocalID;

   long BindSecurityID;

   int is_modify;/*1:modify,0:add*/
        /*
         * NewSSIDName(1)/DisplayString/ASN_OCTET_STR/char(char)//L/A/W/e/R/d/H
         */
   char   NewSSIDName[255];
size_t      NewSSIDName_len; /* # of char elements, not bytes */
    
        /*
         * NewSSIDEnabled(2)/INTEGER/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   NewSSIDEnabled;
    
        /*
         * NewSSIDHidden(3)/INTEGER/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   NewSSIDHidden;
    
        /*
         * NewStaIsolate(4)/INTEGER/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   NewStaIsolate;
    
        /*
         * NewDot11Auth(5)/INTEGER/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   NewDot11Auth;
    
        /*
         * Newsecurity(6)/INTEGER/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   Newsecurity;
    
        /*
         * NewAuthenMode(7)/INTEGER/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   NewAuthenMode;
    
        /*
         * NewSecurityCiphers(8)/INTEGER/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   NewSecurityCiphers;
    
        /*
         * NewEncrInputType(9)/INTEGER/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   NewEncrInputType;
    
        /*
         * NewSecurityKEY(10)/DisplayString/ASN_OCTET_STR/char(char)//L/A/W/e/R/d/H
         */
   char   NewSecurityKEY[255];
size_t      NewSecurityKEY_len; /* # of char elements, not bytes */
    
        /*
         * NewExtensibleAuth(11)/INTEGER/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   NewExtensibleAuth;
    
        /*
         * NewAuthIP(12)/IPADDR/ASN_IPADDRESS/u_long(u_long)//l/A/W/e/r/d/h
         */
   u_long   NewAuthIP;
    
        /*
         * NewAuthPort(13)/INTEGER/ASN_INTEGER/long(long)//l/A/W/e/r/d/h
         */
   long   NewAuthPort;
    
        /*
         * NewAuthSharedSecret(14)/DisplayString/ASN_OCTET_STR/char(char)//L/A/W/e/R/d/H
         */
   char   NewAuthSharedSecret[255];
size_t      NewAuthSharedSecret_len; /* # of char elements, not bytes */
    
        /*
         * NewAcctIP(15)/IPADDR/ASN_IPADDRESS/u_long(u_long)//l/A/W/e/r/d/h
         */
   u_long   NewAcctIP;
    
        /*
         * NewAcctPort(16)/INTEGER/ASN_INTEGER/long(long)//l/A/W/e/r/d/h
         */
   long   NewAcctPort;
    
        /*
         * NewAcctSharedSecret(17)/DisplayString/ASN_OCTET_STR/char(char)//L/A/W/e/R/d/H
         */
   char   NewAcctSharedSecret[255];
size_t      NewAcctSharedSecret_len; /* # of char elements, not bytes */
    
        /*
         * NewVlanId(18)/INTEGER/ASN_INTEGER/long(long)//l/A/W/e/r/d/h
         */
   long   NewVlanId;
    
        /*
         * NewMaxSimultUsers(19)/INTEGER32/ASN_INTEGER/long(long)//l/A/W/e/r/d/h
         */
   long   NewMaxSimultUsers;
    
        /*
         * NewStaUplinkMaxRate(20)/INTEGER32/ASN_INTEGER/long(long)//l/A/W/e/r/d/h
         */
   long   NewStaUplinkMaxRate;
    
        /*
         * NewStaDwlinkMaxRate(21)/INTEGER32/ASN_INTEGER/long(long)//l/A/W/e/r/d/h
         */
   long   NewStaDwlinkMaxRate;
    
        /*
         * SSIDRowStatus(22)/RowStatus/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   SSIDRowStatus;
    
        /*
         * StasDeadTime(25)/TICKS/ASN_TIMETICKS/u_long(u_long)//l/A/W/e/r/d/h
         */
   u_long   StasDeadTime;
    
        /*
         * AuthDeadTime(26)/TICKS/ASN_TIMETICKS/u_long(u_long)//l/A/W/e/r/d/h
         */
   u_long   AuthDeadTime;
    
        /*
         * NewWapiAuthIP(27)/IPADDR/ASN_IPADDRESS/u_long(u_long)//l/A/W/e/r/d/h
         */
   u_long   NewWapiAuthIP;
    
        /*
         * NewWapiCertificationType(28)/INTEGER/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   NewWapiCertificationType;
    
        /*
         * NewWapiASCertificationPath(29)/DisplayString/ASN_OCTET_STR/char(char)//L/A/W/e/R/d/H
         */
   char   NewWapiASCertificationPath[255];
size_t      NewWapiASCertificationPath_len; /* # of char elements, not bytes */
    
        /*
         * NewWapiAECertificationPath(30)/DisplayString/ASN_OCTET_STR/char(char)//L/A/W/e/R/d/H
         */
   char   NewWapiAECertificationPath[255];
size_t      NewWapiAECertificationPath_len; /* # of char elements, not bytes */
    
} dot11SSIDConfigTable_data;


/* *********************************************************************
 * TODO:115:o: |-> Review dot11SSIDConfigTable undo context.
 * We're just going to use the same data structure for our
 * undo_context. If you want to do something more efficent,
 * define your typedef here.
 */
typedef dot11SSIDConfigTable_data dot11SSIDConfigTable_undo_data;

/*
 * TODO:120:r: |-> Review dot11SSIDConfigTable mib index.
 * This structure is used to represent the index for dot11SSIDConfigTable.
 */
typedef struct dot11SSIDConfigTable_mib_index_s {

        /*
         * wlanID(1)/INTEGER/ASN_INTEGER/long(long)//l/A/W/e/r/d/h
         */
   long   wlanID;


} dot11SSIDConfigTable_mib_index;

    /*
     * TODO:121:r: |   |-> Review dot11SSIDConfigTable max index length.
     * If you KNOW that your indexes will never exceed a certain
     * length, update this macro to that length.
*/
#define MAX_dot11SSIDConfigTable_IDX_LEN     1


/* *********************************************************************
 * TODO:130:o: |-> Review dot11SSIDConfigTable Row request (rowreq) context.
 * When your functions are called, you will be passed a
 * dot11SSIDConfigTable_rowreq_ctx pointer.
 */
typedef struct dot11SSIDConfigTable_rowreq_ctx_s {

    /** this must be first for container compare to work */
    netsnmp_index        oid_idx;
    oid                  oid_tmp[MAX_dot11SSIDConfigTable_IDX_LEN];
    
    dot11SSIDConfigTable_mib_index        tbl_idx;
    
    dot11SSIDConfigTable_data              data;
    dot11SSIDConfigTable_undo_data       * undo;
    unsigned int                column_set_flags; /* flags for set columns */


    /*
     * flags per row. Currently, the first (lower) 8 bits are reserved
     * for the user. See mfd.h for other flags.
     */
    u_int                       rowreq_flags;

    /*
     * TODO:131:o: |   |-> Add useful data to dot11SSIDConfigTable rowreq context.
     */
    
    /*
     * storage for future expansion
     */
    netsnmp_data_list             *dot11SSIDConfigTable_data_list;

} dot11SSIDConfigTable_rowreq_ctx;

typedef struct dot11SSIDConfigTable_ref_rowreq_ctx_s {
    dot11SSIDConfigTable_rowreq_ctx *rowreq_ctx;
} dot11SSIDConfigTable_ref_rowreq_ctx;

/* *********************************************************************
 * function prototypes
 */
    int dot11SSIDConfigTable_pre_request(dot11SSIDConfigTable_registration * user_context);
    int dot11SSIDConfigTable_post_request(dot11SSIDConfigTable_registration * user_context,
        int rc);

    int dot11SSIDConfigTable_rowreq_ctx_init(dot11SSIDConfigTable_rowreq_ctx *rowreq_ctx,
                                   void *user_init_ctx);
    void dot11SSIDConfigTable_rowreq_ctx_cleanup(dot11SSIDConfigTable_rowreq_ctx *rowreq_ctx);

    int dot11SSIDConfigTable_check_dependencies(dot11SSIDConfigTable_rowreq_ctx * rowreq_ctx); 
    int dot11SSIDConfigTable_commit(dot11SSIDConfigTable_rowreq_ctx * rowreq_ctx);

    dot11SSIDConfigTable_rowreq_ctx *
                  dot11SSIDConfigTable_row_find_by_mib_index(dot11SSIDConfigTable_mib_index *mib_idx);

extern oid dot11SSIDConfigTable_oid[];
extern int dot11SSIDConfigTable_oid_size;


#include "dot11SSIDConfigTable_interface.h"
#include "dot11SSIDConfigTable_data_access.h"
#include "dot11SSIDConfigTable_data_get.h"
#include "dot11SSIDConfigTable_data_set.h"

/*
 * DUMMY markers, ignore
 *
 * TODO:099:x: *************************************************************
 * TODO:199:x: *************************************************************
 * TODO:299:x: *************************************************************
 * TODO:399:x: *************************************************************
 * TODO:499:x: *************************************************************
 */

#ifdef __cplusplus
}
#endif

#endif /* DOT11SSIDCONFIGTABLE_H */
/** @} */
