Linux PCI Driver for Octeon (Base Module - Version 2.2.0)
=========================================================

This version of the Octeon PCI host driver is supported on the 2.6 linux kernel.


NOTE: DRIVER_ROOT in the documentation refers to OCTEON-SDK/components/driver -
      the location where the driver sources are installed.


                              Directory Structure
                              -------------------

OCTEON-SDK/components/driver
    |
    |-- Makefile   (Top Level Makefile)
    |
    |-- README.txt (Compilation instructions)
    |
    |--core   (The Octeon core driver files)
    |
    |--common (Structures & macros used by Octeon Core & host driver)
    |
    |--bin    (Driver and utilities binaries)
    |
    |--host
        |
        |--include   (Header files used by Octeon Host driver)
        |
        |--driver
        |   |
        |   |--linux (Linux specific Host driver files/Host Driver Makefile)
        |   |
        |   |--osi   (OS-independent driver implementation)
        |
        |--api       (User level API for interacting with driver)
        |
        |--utils     (Octeon driver utilities source code)
        |
        |--test      (User space test programs)
            |
            |-- kernel
                  |
                  |-- req_resp  (Kernel space request/response test program)
                  |
                  |-- droq_test (Kernel space output queue test program)
 


                               Driver source tree
                               ------------------
 A set of header files used by the host and core Octeon drivers in kept in
 DRIVER_ROOT/common.

 All the host driver source code is available under DRIVER_ROOT/host.

 Header files in DRIVER_ROOT/host/include are used by the driver and by user
 applications which find important data structures used to interact with the
 driver in these files.

 All linux-specific files are under DRIVER_ROOT/host/driver/linux which
 includes driver load time allocation, interrupt handling and ioctl handling.

 All other OS-independent code is under DRIVER_ROOT/host/driver/osi which
 includes device initialization, input queue management, request handling
 and response management, output queue management, DMA queue management,
 buffer pools and additional debugging code.

 A user-space library provides a wrapper around all Octeon ioctls that the
 user applications can call. The library is in DRIVER_ROOT/host/api. The
 Octeon user applications in utils make use of this library. For e.g.,
 the library api to read and write Octeon registers are used by the Octeon
 debug utility - oct_dbg.

 The binaries and driver object module generated by the compilation process
 for Octeon Host driver and utilities are kept in the DRIVER_ROOT/bin
 directory.

 There are test applications provided under DRIVER_ROOT/host/test,
 DRIVER_ROOT/host/test/kernel/droq_test and 
 DRIVER_ROOT/host/test/kernel/req_resp to test the PCI driver.






                               Change History
                               --------------
 Release 2.2.0
 =============
 * Support for CN66xx Pass1.
 * Includes workaround for the following CN68XX errata:
   - CN68XX vendor message fix.
 * Known issues:
   * No irq handler for irq -1 reported on fc14 with MSI enabled in driver.
     - This issue has been seen with other drivers as well and the suggested
       workaround of booting the kernel with pci=nomsi option seems to work.
   * DMA failures seen with addresses returned by pci_map_single() on 64-bit
     SL 5.5.
     - using virt_to_phys() instead seems to help. The linux_sysdep.h file
       has a #define (USE_PCIMAP_CALLS) which can be commented off to use
       virt_to_phys() instead of pci_map_single() for DMA addresses.





 Release 2.1.0
 =============
 * Support for CN68xx Pass1.
 * Added support for PCIe port > 0 for CN63xx/CN68xx.
 * octeon_process_request() returns cause of failure in retval.status.
 * Response completion can use DMA counter interrupt instead of force interrupt.
 * IRH format updated to indicate PCIe port to use for response.
 * Sample app uses all cores for packet processing.
 * Includes fixes for the following bugs:
   * Driver crash due to soft instruction access outside of lock.
   * virtual memory freeing inside lock.
   * CN63xx PCI o/p queue pkt timer interrupt level calculation is incorrect.
   * Limit check for DMA local and remote pointers were incorrect.
   * reduced performance in ioctl in newer kernels due to vmalloc.
 * Known issues:
   * No irq handler for irq -1 reported on fc14 with MSI enabled in driver.
     - This issue has been seen with other drivers as well and the suggested
       workaround of booting the kernel with pci=nomsi option seems to work.
   * DMA failures seen with addresses returned by pci_map_single() on 64-bit
     SL 5.5.
     - using virt_to_phys() instead seems to help. The linux_sysdep.h file
       has a #define (USE_PCIMAP_CALLS) which can be commented off to use
       virt_to_phys() instead of pci_map_single() for DMA addresses.

   
   

   


 Release 2.0.0
 =============
 * Added support for CN63xx Pass1.
 * Includes workaround for the following CN56XX errata:
   - PCIE packet output incorrectly produces 64-bit TLP when writing to
     memory in 2-4 Gigabyte range.
   - PCIE packet output blocked when PCIE packet input is blocked
     (affects CN63XX Pass1.x as well) when packet buffer pool runs low.
 * Includes workaround for the following CN63XX errata:
   - SLI_CTL_PORT turns off responses to BAR0 access after reset.
 * Added support for Output queue processing on multiple CPUs.
 * Core application can now have more than one app type.
 * New API in core driver to send packet on any of the 32 output queues
   (Requires changes in SE and host driver to enable all queues).
 * Includes fixes for the following bugs:
   * MPS programming should not use fixed values.
   * Sum of local+remote pointers in DMA command cannot exceed 28.
   * Crash on host if OCTEON_COMP_IN_INTERRUPT is not defined.
   * Remote word count for PCI DMA in core driver can return incorrect values.
   * Extra header bytes processing incorrect for 64-byte header.
 * Support for CN38XX is included but deprecated.
 * 2.4.x kernel versions are no longer supported.
 * CAVIUM_SUPPORT_DEPRECATED_API may be removed in next release.
 




 Release 1.0.0
 =============
 * Support for CN56XX Pass2.1.
 * Fix for errata PCIE-13340.
 * Added support for 64-byte instruction.
 * Added support for compat-ioctl.
 * Changes in octeon_soft_request_t structure. Old format supported if 
   CAVIUM_SUPPORT_DEPRECATED_API  is  enabled. If  the  deprecated API
   needs to  be used, enable the CVM_SUPPRESS_DEPRECATED_WARNINGS flag
   in  cavium-defs.h  to suppress warning messages during compilation.
 * /proc/OcteonX/npireg  file  is available only for cn58xx and older
   octeon; /proc/OcteonX/status includes information on Input & Output
   queue configuration; /proc/OcteonX/statsb  removed;  Register  dump
   in /proc/OcteonX/[csr|npi|config]reg improved.
 * Poll  List  implementation  added. Kernel applications can register
   functions with driver that  will get  called in  the context of the
   driver's poll thread at a frequency specified at registration time.
 * ioctl added for reading driver statistics.
 * oct_stats utility uses ioctl to read driver stats; quits on any key
   stroke in curses mode and CTRL-C when curses is not used.
 * Support added for 2.6.27 kernel.
 * CN56XX  Workaround is now deprecated and may be removed from future
   releases.
 * Support added for customizable configuration for CN38XX and CN56XX.
   Default  Octeon  configuraton  information  for all  devices is in
   components/driver/host/include/oct_config_data.h.
 * Hot reset support added for CN56XX.
 * oct_load_bin is  not  supported. Use oct-pci-load from SDK instead.
 * Sanity check usage updates (requires components-common 1.6.5).

 Bug fixes:
   1. # 1846 - reset implementation for CN56XX is not complete.
   2. # 2113 - Shared IRQ handling can fail during driver unload.
   3. # 2141 - Posting command to Input queue should enforce sync


NOTE: There are no driver releases between 0.9.8 and 1.0.0.


 Release 0.9.8
 =============
 * support for CN56XX Pass2 Input and Output queues.
 * Fix for 56XX Pass2 errata PCIE-811, IOB-800, PCIE-13316, PCIE-13337
 * 56XX Pass1 workaround reads input data in 64-byte aligned chunks.
 * Endpoint to Endpoint communication supports multiple endpoints.
 * PKO MaxPkt test improved.
 * cvm-deprecated files removed
 * cavium list implementation updated

 Bug fixes:
   1. # 1826 - memory leak - input queue ring buffer not freed.




 Release 0.9.7
 =============
 * Workaround for Octeon CN56XX Pass1 with fixes for PCIE Errata 604, 606
   & 716.
 * Support for communication between two 56XX Pass1 endpoints.

 Bug fixes:
    # 1907 - Input Queue #1 and above processed incorrectly if queue sizes 
             differs from queue 0.



 Release 0.9.6
 =============
 * Added support for Octeon CN58XX NicPro2.
 * Added workaround for Octeon CN56XX Pass1.
 * Integrated support for EtherPCI.
 * Improved Noresponse packet handling performance.
 * Improved Output Queue performance.
 * Older core driver API's now deprecated (see html documentation).
 * Some PCI data structures definitions moved from simple executive to PCI
   core driver library.

 Bug fixes:
   1. #1281 - Driver ignores signal for user-space unordered blocking requests.
   2. #1370 - Race condition can cause request callback to be called before
              completion.
   3. #1480 - octeon_register_module_handler() failure case is not handled
              properly.
   4. #1486 - sequence of setting up interrupt can cause a kernel panic.
   5. #1487 - droq_ops function pointer setting should be available for all 
              output queues.
   6. #1491 - octeon core memory read/write api's ignores unmapped BAR1 ranges.



 Release 0.9.5 
 =============
  * Support Added for CN58XX.
  * Directory structure of core application in applications/pci-core-app
    modified. Common routines are now in pci-core-app/common; test routines are
    now in pci-core-app/test; BASE application now in pci-core-app/base;
    Includes new code to demonstrate PCI DMA api usage.
  * Host driver Makefile modifications to add support for building driver for
    Octeon Host mode.
  * Instruction count is reset to 0 at init for PASS3 and above.
  * Changes in core component of PCI driver (components/driver/core)
    - New API's added that allow PCI DMA completion indication (WQE or word)
      and blocking calls.
    - cvm-drv-reqresp.c holds all routines for pci instruction response
    - More checks in core driver for PCI DMA pointers and sizes.
  * Improved print format in /proc entries to read Octeon registers.
  * Updated copyright and License.

  Bug fixes:
    1. #1145 - Fix for CN38XX PASS3 errata #500; Octeon DMA hardware buffer 
               size limited to 8184 bytes.
    2. #1246, #1247 - Host driver must ensure that PCI windowed writes are
               completed by following the write with a read at the same address.
    3. #1267 - PCI_WIN_WR_MASK should be set to 0.



 Release 0.9.4 - * Adds support for Hot Reset of octeon device (Reset Octeon
                   without unloading the driver).
                 * Adds support for scatter-gather for user & kernel space
                   applications (#976 and #1012).
                 * Adds more statistics and driver state information.
                 * Driver will NOT send requests to core unless core sends
                   indication (cvm_drv_start() is called in core).
                 * Driver opcode values have changed.
                 * Fixes for following bugs:
                   #1016 - BIST enabled for PASS2.

 Release 0.9.3 - * Release for SDK 1.5. Supports Octeon PASS3.
                   Fixes for the following bugs:
                   #789 - Module load sequence failure
                   #819 - osi code had linux components

 Release 0.9.2 - * PCI driver now supports multiple octeon devices on a 
                   system. It is also capable of hot-swap. PASS1 support has
                   been removed completely.

 Release 0.9.1 - * PCI driver  now  supports 64-bit systems and big endian
                   systems. Bug fixes - #679 (stricter check of configuration)
                   Test applications improved and more documentation added. 

 Release 0.9.0 - * Repackaged PCI driver. This package provides the base PCI
                   driver. Additional functionality like NIC driver requires
                   a separate RPM now.
                 * Bug fixes - leak in gather list (#620), instruction queue
                   gets full (#647), MAX_DROQ=1 causes kernel panic (#680),
                   NIC panic (#681)
                 * Bugs not fixed (#691) - panic with IQ size = 1.
                 * Requires SDK 1.3.1 and above.

 Release 0.8.6 - * PCI TOE Release.
                 * ordered request completion in interrupt.
                 * DDOQ supports user defined payload.
                 * Bug fixes - uninitalized variable (#551), recv_info 
                   allocation (#568), SYNCWS in core (#584), cdroq removed
                   (#591), DROQ (#604, #612), DDOQ(#614).
 
 Release 0.8.5 - * General Release. Requires SDK 1.3.
                 * Octeon ioctl bug fixes. Allows inbuf and outbuf = 0 in
                   user-space requests. status check bug fix for unordered.
                 * User api for request and query. Recommended for all user
                   apps
                 * unordered blocking request completion in interrupt.
                 * Updated html documentation
                 * Updated utilities and test program.

 Release 0.8.4 - * Octeon Network driver Release. Supports 4 ports. Needs tuning
                 * Tasklets are no longer optional. Config file modifications.
                 * Bug fixes. Updated html documentation. Released on SDK 1.3.
 
 Release 0.8.3 - * cvm-common changes 

 Release 0.8.2 - * CNTQ and DDOQ with support for PASS1 and PASS2 Octeon.

 Release 0.8.1 - * Pci perf test release for pass2.
 
 Release 0.8.0 - * PASS2 support added. Core driver uses DMA queue to send
                   response.
                 * Core memory read/write added.
                 * Device initialization moved to OSI.
 
 Release 0.7.2 - CNTQ and DDOQ added with PASS1 work-arounds. 

 Release 0.7.1 - Bug fixes; pci test programs added. 
       build 4 - bi-directional tests added.

 Release 0.7.0 - DROQ response copy added; support for 2.6.11 added.

 Release 0.6.0 - Initial Release.
