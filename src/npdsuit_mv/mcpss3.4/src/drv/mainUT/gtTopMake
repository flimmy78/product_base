###########################################
##                                       ##
##    Top Make file for CPSS drivers     ##
##                                       ##
###########################################

ifeq (YES, $(INCLUDE_UTF))
## all those files should not be compiled if we not need it

PROJ_NAME = mainUT

include $(USER_BASE)/gtDefsTopMake.mk 


PROJECT_PATH =  $(BASE_PATH)       \
                $(COMMON_PATH)     \
                $(OS_INCLUDE)      \
                $(OS_PATH)         \
                $(SYSCONFIG_PATH)  \
                $(PP_DRV_PATH)     \
                $(EXT_DRV_PATH)    \
                $(XBAR_DRV_PATH)   \
                $(FA_DRV_PATH)     \
                $(UTFTOOL_PATH)    \
                $(UTFTRAFFIC_PATH) \
                $(EXT_C001_PATH)   \
                $(EXT_C002_PATH)

include $(USER_BASE)/gtToolsTopMake.mk 


##############
## CPSS PP  ##
##############
ifeq (EXISTS, $(EX_FAMILY))
AD_CFLAGS += $(FD)EX_FAMILY
endif

ifeq (EXISTS, $(MX_FAMILY))
AD_CFLAGS += $(FD)MX_FAMILY
endif

ifeq (EXISTS, $(CHX_FAMILY))
  AD_CFLAGS += $(FD)CHX_FAMILY
  ifeq (EXISTS, $(EX_FAMILY))
    #compilation of EXDX not support the TGF (enahnced UT)
    SUPPORT_TGF = NOT_SUPPORT
  else
    SUPPORT_TGF = SUPPORT
  endif
endif

ifeq (EXISTS, $(CH3_FAMILY))
AD_CFLAGS += $(FD)CH3_FAMILY
endif

ifeq (EXISTS, $(SAL_FAMILY))
AD_CFLAGS += $(FD)SAL_FAMILY
endif

ifeq (EXISTS, $(TG_FAMILY))
AD_CFLAGS += $(FD)TG_FAMILY
endif

ifeq (EXISTS, $(TD_FAMILY))
AD_CFLAGS += $(FD)TD_FAMILY
endif

ifeq (EXISTS, $(PM_FAMILY))
  AD_CFLAGS += $(FD)EXMXPM_FAMILY
  ifeq (SUPPORT, $(SUPPORT_TGF))
    #code currently not support both DXCH and EXMXPM at the same time
    SUPPORT_TGF = NOT_SUPPORT
  else
    SUPPORT_TGF = SUPPORT
  endif
endif

ifeq (SUPPORT, $(SUPPORT_TGF))
  ifeq (YES, $(INCLUDE_ENHANCED_UTF))
    AD_CFLAGS += $(FD)IMPL_TGF
  endif
else
  INCLUDE_ENHANCED_UTF = NO
endif

#############
## FA flag ## 
#############
ifeq (PRESTERA, $(FA_VENDOR))
AD_CFLAGS += $(FD)IMPL_FA
endif 

###############
## Xbar flag ## 
###############
ifeq (PRESTERA, $(XBAR_VENDOR))
  AD_CFLAGS += $(FD)IMPL_XBAR $(FD)IMPL_XBARDRIVER
endif

##########
## Dune ##
##########
ifeq (DUNE,$(XBAR_VENDOR))
AD_CFLAGS += $(FD)IMPL_DUNE
PROJECT_PATH += $(DUNE_DRV_PATH)    \
                $(DUNE_UTFTOOL_PATH)
endif

##################################################
## Management interface bus : PCI or SMI or I2C ## 
##################################################
ifeq (EXISTS, $(GT_PCI))
AD_CFLAGS += $(FD)GT_PCI
endif
ifeq (EXISTS, $(GT_SMI))
AD_CFLAGS += $(FD)GT_SMI
endif
ifeq (EXISTS, $(GT_I2C))
AD_CFLAGS += $(FD)GT_I2C
endif

#################
## CPSS driver ##
#################
ifeq (EXISTS, $(EXDXMX_DRIVER))
AD_CFLAGS += $(FD)INCL_EXDXMX_DRIVER
endif

#################
## DEBUG FLAGS ##
#################
ifdef PRESTERA_DEBUG
CDEBUG = $(FD)PRESTERA_DEBUG
endif

ifeq (DEBUG_ON, $(CPSS_DEBUG))
ifeq (DEBUG_ON, $(CPSS_DEBUG_VLAN))
CDEBUG += $(FD)GT_VLAN_DEBUG
endif
ifeq (DEBUG_ON, $(CPSS_DEBUG_FDB))
CDEBUG += $(FD)GT_MAC_DEBUG
endif
ifeq (DEBUG_ON, $(CPSS_DEBUG_TRUNK))
CDEBUG += $(FD)GT_TRUNK_DEBUG
endif
ifeq (DEBUG_ON, $(CPSS_DEBUG_FDB_DUMP))
CDEBUG += $(FD)GT_MAC_DEBUG_DUMP
endif
ifeq (DEBUG_ON, $(CPSS_DEBUG_IPV4))
CDEBUG += $(FD)GT_DEBUG_IPV4
endif
ifeq (DEBUG_ON, $(CPSS_DEBUG_IPV6))
CDEBUG += $(FD)GT_DEBUG_IPV6
endif
ifeq (DEBUG_ON, $(CPSS_DEBUG_PCL))
CDEBUG += -DGT_DEBUG_PCL
endif
ifeq (DEBUG_ON, $(CPSS_DEBUG_TCM))
CDEBUG += $(FD)GT_DEBUG_TCM
endif
endif


############
## CFLAGS ##
############
CFLAGS += $(CFLAGS1) $(CFLAGS2) $(CFLAGS_OPT) $(OS_DEFINE) $(CPU_FLAGS) $(LFLAGS) $(AD_CFLAGS) $(CDEBUG)
	
include $(USER_BASE)/gtTargetsTopMake.mk 


ifeq (visual,$(TOOL))
  #for visual use 'lib_full' instead of 'lib' , no need for both 'elf' and 'oneLib' , because same end result --> use elf !
  full: build_dir dep compile lib_full elf
else
full: build_dir dep compile lib onelib elf
endif


## else for not INCLUDE_UTF
else

## STUB 'targets' for the gmake 
full: 
build_dir:
dep:
compile:
lib:
elf:
onelib:


endif
## endif of INCLUDE_UTF

