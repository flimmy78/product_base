#!/bin/sh
#
#############################################################
#
#              Copyright (C) Autelan Technology
#
#This software file is owned and distributed by Autelan Technology 
#
#################################################################
#THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
#ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
#WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
#DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR 
#ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
#(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
#LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON 
#ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
#(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
#SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
##############################################################################
#
# iptables_init     Start iptables firewall
#
# CREATOR:
# autelan.software.shaojunwu. team
# 
# DESCRIPTION: 
#     Starts, stops and saves iptables firewall、captive portal and so on, which use iptables to work.
#
# config: /opt/services/conf/iptables_conf.conf

#echo "$0"

IPTABLES=/opt/bin/iptables
IPTABLES_DATA=/opt/services/conf/iptables_conf.conf
IPV=ip
PROC_IPTABLES_NAMES=/proc/net/${IPV}_tables_names
VAR_SUBSYS_IPTABLES=/var/lock/iptables
TMP_FILE=/opt/www/htdocs/iptables_tmp_file

#相关底层模块的状态  add  by shaojunwu   2008-9-23 17:48:16
FIREWALL_COMMAND=/usr/bin/firewall_init.sh
PORTAL_COMMAND=/usr/bin/portal_init.sh
TRAFFIC_COMMAND=/opt/services/option/traffic_option
FIREWALL_STATUS_FILE=/opt/services/status/firewall_status.status
PORTAL_STATUS_FILE=/opt/services/status/portal_status.status
TRAFFIC_STATUS_FILE=/opt/services/status/traffic_status.status

FIREWALL_STATUS=`cat $FIREWALL_STATUS_FILE 2>/dev/null`
if [ ! -n "${FIREWALL_STATUS}" ];then
	FIREWALL_STATUS="stop"
fi


PORTAL_STATUS=`cat $PORTAL_STATUS_FILE 2>/dev/null`
if [ ! -n "${PORTAL_STATUS}" ];then
	PORTAL_STATUS="stop"
fi

TRAFFIC_STATUS=`cat $TRAFFIC_STATUS_FILE 2>/dev/null`
if [ ! -n "${TRAFFIC_STATUS}" ];then
	TRAFFIC_STATUS="stop"
fi
#add by shaojunwu  end

if [ ! -x $IPTABLES ]; then
    echo -n $"$IPTABLES does not exist."; warning; echo

    exit 0
fi

if lsmod 2>/dev/null | grep -q ipchains ; then
    echo -n $"ipchains and $IPTABLES can not be used together."; warning; echo
    exit 0
fi

# Old or new modutils
/sbin/modprobe --version 2>&1 | grep -q module-init-tools \
    && NEW_MODUTILS=1 \
    || NEW_MODUTILS=0

# Default firewall configuration:
IPTABLES_MODULES="ip_nat_ftp ip_conntrack_ftp"
#IPTABLES_MODULES=""
IPTABLES_MODULES_UNLOAD="yes"
IPTABLES_SAVE_ON_STOP="no"
IPTABLES_SAVE_ON_RESTART="no"
IPTABLES_SAVE_COUNTER="no"
IPTABLES_STATUS_NUMERIC="yes"
IPTABLES_LOAD_ON_START="no"

# Load firewall configuration.
#[ -f "$IPTABLES_CONFIG" ] && . "$IPTABLES_CONFIG"

rmmod_r() {
    # Unload module with all referring modules.
    # At first all referring modules will be unloaded, then the module itself.
    local mod=$1
    local ret=0
    local ref=

    # Get referring modules.
    # New modutils have another output format.
    [ $NEW_MODUTILS = 1 ] \
        && ref=`lsmod | awk "/^${mod}/ { print \\\$4; }" | sed 's/,/ /g'` \
        || ref=`lsmod | grep ^${mod} | cut -d "[" -s -f 2 | cut -d "]" -s -f 1`

    # recursive call for all referring modules
    for i in $ref; do
        rmmod_r $i
        let ret+=$?;
    done

    # Unload module.
    # The extra test is for 2.6: The module might have autocleaned,
    # after all referring modules are unloaded.
    if grep -q "^${mod}" /proc/modules ; then
        /sbin/modprobe -r $mod > /dev/null 2>&1
        let ret+=$?;
    fi

    return $ret
}

flush_n_delete() {
    # Flush firewall rules and delete chains.
    [ -e "$PROC_IPTABLES_NAMES" ] || return 1

    # Check if firewall is configured (has tables)
    tables=`cat $PROC_IPTABLES_NAMES 2>/dev/null`
    [ -z "$tables" ] && return 1

    echo -n $"Flushing firewall rules: "
    ret=0
    # For all tables
    for i in $tables; do
        # Flush firewall rules.
        $IPTABLES -t $i -F;
        let ret+=$?;

        # Delete firewall chains.
        $IPTABLES -t $i -X;
        let ret+=$?;

        # Set counter to zero.
        $IPTABLES -t $i -Z;
        let ret+=$?;
    done

    #[ $ret -eq 0 ] && success || failure
    echo
    return $ret
}

set_policy() {
    # Set policy for configured tables.
    policy=$1

    # Check if iptable module is loaded
    [ ! -e "$PROC_IPTABLES_NAMES" ] && return 1

    # Check if firewall is configured (has tables)
    tables=`cat $PROC_IPTABLES_NAMES 2>/dev/null`
    [ -z "$tables" ] && return 1

    echo -n $"Setting chains to policy $policy: "
    ret=0
    for i in $tables; do
        echo -n "$i "
        case "$i" in
            raw)
                $IPTABLES -t raw -P PREROUTING $policy \
                    && $IPTABLES -t raw -P OUTPUT $policy \
                    || let ret+=1
                ;;
            filter)
                $IPTABLES -t filter -P INPUT $policy \
                    && $IPTABLES -t filter -P OUTPUT $policy \
                    && $IPTABLES -t filter -P FORWARD $policy \
                    || let ret+=1
                ;;
            nat)
                $IPTABLES -t nat -P PREROUTING $policy \
                    && $IPTABLES -t nat -P POSTROUTING $policy \
                    && $IPTABLES -t nat -P OUTPUT $policy \
                    || let ret+=1
                ;;
            mangle)
                $IPTABLES -t mangle -P PREROUTING $policy \
                    && $IPTABLES -t mangle -P POSTROUTING $policy \
                    && $IPTABLES -t mangle -P INPUT $policy \
                    && $IPTABLES -t mangle -P OUTPUT $policy \
                    && $IPTABLES -t mangle -P FORWARD $policy \
                    || let ret+=1
                ;;
            *)
                let ret+=1
                ;;
        esac
    done

    #[ $ret -eq 0 ] && success || failure
    echo
    return $ret
}

create_conf_date() {
echo -e "\
# Generated by iptables-save v1.3.6 on Tue Jul 15 09:23:24 2008\n"\
"*mangle\n"\
":PREROUTING ACCEPT [235:63603]\n"\
":INPUT ACCEPT [223:63007]\n"\
":FORWARD ACCEPT [0:0]\n"\
":OUTPUT ACCEPT [180:68723]\n"\
":POSTROUTING ACCEPT [180:68723]\n"\
"COMMIT\n"\
"# Completed on Tue Jul 15 09:23:24 2008\n"\
"# Generated by iptables-save v1.3.6 on Tue Jul 15 09:23:24 2008\n"\
"*nat\n"\
":PREROUTING ACCEPT [32:3256]\n"\
":POSTROUTING ACCEPT [0:0]\n"\
":OUTPUT ACCEPT [0:0]\n"\
"COMMIT\n"\
"# Completed on Tue Jul 15 09:23:24 2008\n"\
"# Generated by iptables-save v1.3.6 on Tue Jul 15 09:23:24 2008\n"\
"*filter\n"\
":INPUT ACCEPT [357:99967]\n"\
":FORWARD ACCEPT [0:0]\n"\
":OUTPUT ACCEPT [291:114632]\n"\
"COMMIT\n"\
"# Completed on Tue Jul 15 09:23:24 2008\n"  > $IPTABLES_DATA

return $?
}

start() {
	if [ "x${IPTABLES_LOAD_ON_START}" = "xyes" ];then
	    # Do not start if there is no config file.
	    [ -f "$IPTABLES_DATA" ] || create_conf_date
	
	    echo -n $"Applying $IPTABLES firewall rules: "
	
	    OPT=
	    [ "x$IPTABLES_SAVE_COUNTER" = "xyes" ] && OPT="-c"
	
	    $IPTABLES-restore $OPT $IPTABLES_DATA
	    if [ $? -eq 0 ]; then
	        #success; echo
	        echo
	    else
	        #failure; echo; return 1
	        echo; return 1
	    fi
	fi
	
    # Load additional modules (helpers)
    if [ -n "$IPTABLES_MODULES" ]; then
     #   echo -n $"Loading additional $IPTABLES modules: "
        ret=0
        for mod in $IPTABLES_MODULES; do
        #    echo -n "$mod "
            /sbin/modprobe $mod > /dev/null 2>&1
            let ret+=$?;
        done
        #[ $ret -eq 0 ] && success || failure
        echo
    fi

#    touch $VAR_SUBSYS_IPTABLES

    #Set start status flag
    echo "start" > /opt/services/status/iptables_status.status

	echo "iptables start $ret"
    return $ret
}

stop() {
    # Do not stop if iptables module is not loaded.
    [ -e "$PROC_IPTABLES_NAMES" ] || return 1

    flush_n_delete
    set_policy ACCEPT

    if [ "x$IPTABLES_MODULES_UNLOAD" = "xyes" ]; then
        echo -n $"Unloading $IPTABLES modules: "
        ret=0
        rmmod_r ${IPV}_tables
        let ret+=$?;
        rmmod_r ${IPV}_conntrack
        let ret+=$?;
        #[ $ret -eq 0 ] && success || failure
        echo
    fi

 #   rm -f $VAR_SUBSYS_IPTABLES
    
    #Set stop status flag
    echo "stop" > /opt/services/status/iptables_status.status
	
	echo "iptables stop $ret"
    return $ret
}

save() {
    # Check if iptable module is loaded
    [ ! -e "$PROC_IPTABLES_NAMES" ] && return 1

    # Check if firewall is configured (has tables)
    tables=`cat $PROC_IPTABLES_NAMES 2>/dev/null`
    [ -z "$tables" ] && return 1

    echo -n $"Saving firewall rules to $IPTABLES_DATA: "

    OPT=
    [ "x$IPTABLES_SAVE_COUNTER" = "xyes" ] && OPT="-c"

    ret=0
       [ ! -e "$TMP_FILE" ] && touch  $TMP_FILE \
	&& chmod 600 "$TMP_FILE" \
        && $IPTABLES-save $OPT > $TMP_FILE 2>/dev/null \
	&& size=`wc -m $TMP_FILE | awk '{print $1}' ` && [ $size -gt 0 ]\
	|| ret=1
    if [ $ret -eq 0 ]; then
        if [ -e $IPTABLES_DATA ]; then
           cp -f $TMP_FILE $IPTABLES_DATA || ret=1
        fi
    fi
    #[ $ret -eq 0 ] && success || failure
    echo
    rm -f $TMP_FILE
    return $ret
}

restart() {
    [ "x$IPTABLES_SAVE_ON_RESTART" = "xyes" ] && save
    stop
    start
}

case "$1" in
	init)
		start
		RETVAL=$?
		;;
    start)
#start iptables serverces
#        stop
        start
        RETVAL=$?
#		echo "TRAFFIC_STATUS="$TRAFFIC_STATUS
        
#if $2 configed do
		if [ $RETVAL = "0" ];then
			if [ ! "x$2" = "x" ]; then
				[ -e "/usr/bin/$2_init.sh" ] && /usr/bin/$2_init.sh start > /dev/null 2>&1
			else
#如果未指定，则检查相应的状态来决定
#注意，如果在开机时，iptables_init执行之前没有完成文件的copy，导致状态检查和实际的不一致，需要和刘涛沟通～～
				if [ "x$FIREWALL_STATUS" = "xstart" ];then
					[ -e "$FIREWALL_COMMAND" ] && $FIREWALL_COMMAND start > /dev/null 2>&1
				fi
				if [ "x$PORTAL_STATUS" = "xstart" ];then
					[ -e "$PORTAL_COMMAND" ] && $PORTAL_COMMAND start > /dev/null 2>&1
				fi
				if [ "x$TRAFFIC_STATUS" = "xstart" ];then
#					echo  "start traffic"
					[ -e "$TRAFFIC_COMMAND" ] && $TRAFFIC_COMMAND start > /dev/null 2>&1
				fi								
			fi
	    fi
        ;;
    stop)
		if [ ! "x$2" = "x" ]; then
			[ -e "/usr/bin/$2_init.sh" ] && /usr/bin/$2_init.sh stop > /dev/null 2>&1
		else
#       		[ "x$IPTABLES_SAVE_ON_STOP" = "xyes" ] && save
			[ -e "$FIREWALL_COMMAND" ] && $FIREWALL_COMMAND stop > /dev/null 2>&1
			[ -e "$PORTAL_COMMAND" ] && $PORTAL_COMMAND stop > /dev/null 2>&1
			[ -e "$TRAFFIC_COMMAND" ] && $TRAFFIC_COMMAND stop > /dev/null 2>&1
        	stop
        	RETVAL=$?
		fi
	   ;;
    restart)
		if [ ! "x$2" = "x" ]; then
			[ -e "/usr/bin/$2_init.sh" ] && /usr/bin/$2_init.sh restart > /dev/null 2>&1
		else
        	restart
        	RETVAL=$?
		fi
        ;;
    save)
		if [ ! "x$2" = "x" ]; then
			[ -e "/usr/bin/$2_init.sh" ] && /usr/bin/$2_init.sh save > /dev/null 2>&1
		else
        	#save
        	echo
        	RETVAL=$?
		fi    
        ;;
    flush)
		if [ ! "x$2" = "x" ]; then
			[ -e "/usr/bin/$2_init.sh" ] \
				&& /usr/bin/$2_init.sh flush > /dev/null 2>&1 \
				|| echo "$2_init.sh is not exist"
		else
			#flush_n_delete
			RETVAL=$?
		fi
		;;
    *)
        echo $"Usage: $0 {start|stop|restart|save}"
        exit 1
        ;;
esac

exit $RETVAL


